zz <- rbind(counties, qq)
zz <- cbind(counties, qq)
zz <- cbind(counties, t(qq))
counties <- cbind(counties, t(qq))
map("usa")
nc.int <- c(0, 100, 250, 500, 1000, max(counties$ncases, na.rm = T)+1)
counties$nc.col <- rbow(length(nc.int)-1)[findInterval(counties$ncases, nc.int)]
points(counties$x, counties$y, col = counties$nc.col)
# get latest daily cases attached to mapping information
counties <- county.fips
counties <- merge(counties, dcases[,c(1:4,ncol(dcases))], by.x = "fips", by.y = "countyFIPS")
counties <- setNames(counties, c("fips", "polyname", "county", "state", "sfips","ncases"))
counties$ncases[counties$ncases < 0] <- 0
counties <- cbind(counties, t(sapply(counties$polyname, function(pnm) {
crng <- map("county", pnm, plot = F)$range
c("x" = mean(crng[1:2]), "y" = mean(crng[3:4]))
})))
nc.int <- c(0, 100, 250, 500, 1000, max(counties$ncases, na.rm = T)+1)
counties$nc.col <- rbow(length(nc.int)-1)[findInterval(counties$ncases, nc.int)]
map("county", fill = T, mar = c(0.5,0.5,0.5,0.5),
col = counties$nc.col[match(map("county", namesonly = T), counties$polyname)])
map("usa")
points(counties$x, counties$y, col = counties$nc.col)
points(counties$x, counties$y, col = counties$nc.col, pch = 20)
map("usa")
points(counties$x, counties$y, col = counties$nc.col, pch = 20)
points(counties$x, counties$y, col = counties$nc.col, pch = 20, cex = 0.8)
cbind(rep(1,5), rep(1,5))
l <- counties[counties$polyname]
cd <- counties[counties$polyname,]
cd <- counties[counties$polyname == pnm,]
pnm <- "alamaba,autauga"
cd <- counties[counties$polyname == pnm,]
pnm <- "alabama,autauga"
cd <- counties[counties$polyname == pnm,]
all.px <- sapply(counties$polyname[1:5], function(pnm) {
cd <- counties[counties$polyname == pnm,]
cbind("x" = rep(cd$x, cd$ncases), "y" = rep(cd$y, cd$ncases))
})
all.px <- sapply(counties$polyname[1:5], function(pnm) {
cd <- counties[counties$polyname == pnm,]
cbind("x" = rep(cd$x, cd$ncases), "y" = rep(cd$y, cd$ncases))
}, simplify = F)
all.px <- sapply(counties$polyname[1:5], function(pnm) {
cd <- counties[counties$polyname == pnm,]
cbind("x" = rep(cd$x, cd$ncases), "y" = rep(cd$y, cd$ncases))
}, simplify = T)
all.px <- sapply(counties$polyname[1:5], function(pnm) {
cd <- counties[counties$polyname == pnm,]
rbind("x" = rep(cd$x, cd$ncases), "y" = rep(cd$y, cd$ncases))
}, simplify = T)
}, simplify = F
all.px <- sapply(counties$polyname[1:5], function(pnm) {
cd <- counties[counties$polyname == pnm,]
rbind("x" = rep(cd$x, cd$ncases), "y" = rep(cd$y, cd$ncases))
})
as.matrix(rbind("x" = rep(cd$x, cd$ncases), "y" = rep(cd$y, cd$ncases)))
all.px <- sapply(counties$polyname[1:5], function(pnm) {
cd <- counties[counties$polyname == pnm,]
as.matrix(rbind("x" = rep(cd$x, cd$ncases), "y" = rep(cd$y, cd$ncases)))
})
}, along = 2)
all.px <- abind(sapply(counties$polyname[1:5], function(pnm) {
cd <- counties[counties$polyname == pnm,]
cbind("x" = rep(cd$x, cd$ncases), "y" = rep(cd$y, cd$ncases))
}), along = 2)
all.px <- abind::abind(sapply(counties$polyname[1:5], function(pnm) {
cd <- counties[counties$polyname == pnm,]
cbind("x" = rep(cd$x, cd$ncases), "y" = rep(cd$y, cd$ncases))
}), along = 2)
all.px <- abind::abind(sapply(counties$polyname[1:5], function(pnm) {
cd <- counties[counties$polyname == pnm,]
cbind("x" = rep(cd$x, cd$ncases), "y" = rep(cd$y, cd$ncases))
}), along = 1)
map("usa")
points(all.px)
smoothScatter(all.px)
smoothScatter(all.px, add = T)
all.px <- abind::abind(sapply(counties$polyname, function(pnm) {
cd <- counties[counties$polyname == pnm,]
cbind("x" = rep(cd$x, cd$ncases), "y" = rep(cd$y, cd$ncases))
}), along = 1)
map("usa")
points(all.px)
map("usa")
smoothScatter(all.px, add = T)
map("usa")
smoothScatter(all.px, add = T)
?smoothScatter
?kde2d
library(MASS)
?kde2d
kde2d(all.px$x, all.px$y)
all.px <- abind::abind(sapply(counties$polyname, function(pnm) {
cd <- counties[counties$polyname == pnm,]
cbind(rep(cd$x, cd$ncases), rep(cd$y, cd$ncases))
}), along = 1)
kde2d(all.px[,1], all.px[,2])
de <- kde2d(all.px[,1], all.px[,2])
map("usa")
image(de$x, de$y, de$z)
image(de$x, de$y, de$z, add =T)
map("usa", add = T)
de <- kde2d(all.px[,1], all.px[,2], n = 50)
map("usa")
image(de$x, de$y, de$z, add = T)
map("usa", add = T)
de <- kde2d(all.px[,1], all.px[,2], n = 100)
map("usa")
image(de$x, de$y, de$z, add = T)
map("usa", add = T)
hist(de$z, breaks = "fd")
map("usa")
points(jitter(all.px), pch = 20, col = transp("red", 0.3), cex = 0.6)
?jitter
map("usa")
points(jitter(all.px, factor = 2), pch = 20, col = transp("red", 0.3), cex = 0.6)
all.px <- abind::abind(sapply(counties$polyname, function(pnm) {
cd <- counties[counties$polyname == pnm,]
setNames(cbind(rep(cd$x, cd$ncases), rep(cd$y, cd$ncases),
rep(cd$nc.col, cd$ncases)), NULL)
}), along = 1)
map("usa")
points(jitter(all.px[,1:2], factor = 2), pch = 20, col = transp(all.px[3], 0.3), cex = 0.6)
all.px[,1:2]
all.px <-
sapply(counties$polyname, function(pnm) {
cd <- counties[counties$polyname == pnm,]
data.frame("x" = rep(cd$x, cd$ncases),
"y" = rep(cd$y, cd$ncases),
"nc.col" = rep(cd$nc.col, cd$ncases))
})
all.px <-
all.px <- abind::abind(sapply(counties$polyname, function(pnm) {
cd <- counties[counties$polyname == pnm,]
cbind(rep(cd$x, cd$ncases), rep(cd$y, cd$ncases))
}), along = 1)
px.col <- sapply(counties$polyname, function(pnm) {
rep(counties$nc.col[counties$polyname == pnm,],
counties$ncases[counties$polyname == pnm,])
})
px.col <- sapply(counties$polyname, function(pnm) {
rep(counties$nc.col[counties$polyname == pnm],
counties$ncases[counties$polyname == pnm])
})
px.col <- rbind.fill(sapply(counties$polyname, function(pnm) {
rep(counties$nc.col[counties$polyname == pnm],
counties$ncases[counties$polyname == pnm])
}))
px.col <- unlist(sapply(counties$polyname, function(pnm) {
rep(counties$nc.col[counties$polyname == pnm],
counties$ncases[counties$polyname == pnm])
}))
map("usa")
points(jitter(all.px, 2), pch = 20, col = transp(px.col, 0.3), cex = 0.6)
map("usa", mar = c(0.5,0.5,0.5,0.5))
points(jitter(all.px, 2), pch = 20, col = transp(px.col, 0.3), cex = 0.6)
map("usa", mar = c(0.5,0.5,0.5,0.5))
points(jitter(all.px, 2), pch = 20, col = transp(px.col, 0.3), cex = 0.6)
map("states", add = T)
map("state", add = T)
setwd("~/PhD/Misc-notes/Covid-19")
refresh("covid"0)
refresh("covid")
install.packages("animate")
refresh("covid")
dcases <- read.csv(cnm)
dcases <- data.frame(dcases[,1:5],
dcases[,-(1:5)] - dcases[,5:(ncol(dcases)-1)])
dcases <- read.csv("~/PhD/Misc-notes/Covid-19/data/us-ccases.csv")
dcases <- data.frame(dcases[,1:5],
dcases[,-(1:5)] - dcases[,5:(ncol(dcases)-1)])
colnames(dcases)[-(1:4)]
dcases[dcases < 0] <- 0
# get latest daily cases attached to mapping information
counties <- county.fips
counties <- merge(counties, dcases[,c(1:4,ncol(dcases))], by.x = "fips", by.y = "countyFIPS")
counties <- setNames(counties, c("fips", "polyname", "county", "state", "sfips","ncases"))
counties <- cbind(counties, t(sapply(counties$polyname, function(pnm) {
crng <- map("county", pnm, plot = F)$range
c("x" = mean(crng[1:2]), "y" = mean(crng[3:4]))
})))
# get latest daily cases attached to mapping information
counties <- county.fips
counties <- merge(counties, dcases, by.x = "fips", by.y = "countyFIPS")
counties <- setNames(counties, c("fips", "polyname", "county", "state", "sfips","ncases"))
counties <- cbind(counties, t(sapply(counties$polyname, function(pnm) {
crng <- map("county", pnm, plot = F)$range
c("x" = mean(crng[1:2]), "y" = mean(crng[3:4]))
})))
# get latest daily cases attached to mapping information
counties <- county.fips
counties <- merge(counties, dcases, by.x = "fips", by.y = "countyFIPS")
counties <- cbind(counties, t(sapply(counties$polyname, function(pnm) {
crng <- map("county", pnm, plot = F)$range
c("x" = mean(crng[1:2]), "y" = mean(crng[3:4]))
})))
nc.int <- c(0, 100, 250, 500, 1000, max(counties[,-(1:4)], na.rm = T)+1)
nc.int <- c(0, 100, 250, 500, 1000, max(counties[,-(1:5)], na.rm = T)+1)
colnames(counties)[-(1:4)]
xdt <- colnames(counties)[-(1:5)]]1
xdt <- colnames(counties)[-(1:5)][1]
xdt
mdt <- counties[,c(1:5,xdt)]
mdt <- counties[,c(1:5,colnames(counties) == xdt)]
colnames(counties) == xdt
mdt <- counties[,c(1:5,which(colnames(counties) == xdt))]
mdt <- counties[,c(2,which(colnames(counties) == xdt))]
mdt <- setnames(counties[,c(2,which(colnames(counties) == xdt))],
c("polyname", "ncases"))
mdt <- setNames(counties[,c(2,which(colnames(counties) == xdt))],
c("polyname", "ncases"))
counties <- cbind(counties, t(sapply(counties$polyname, function(pnm) {
crng <- map("county", pnm, plot = F)$range
c("x" = mean(crng[1:2]), "y" = mean(crng[3:4]))
})))
# get latest daily cases attached to mapping information
counties <- county.fips
counties <- cbind(counties, t(sapply(counties$polyname, function(pnm) {
crng <- map("county", pnm, plot = F)$range
c("x" = mean(crng[1:2]), "y" = mean(crng[3:4]))
})))
counties <- merge(counties, dcases, by.x = "fips", by.y = "countyFIPS")
colnames(counties)[-(1:7)]
mdt <- setNames(counties[,c(2,which(colnames(counties) == xdt))],
c("polyname", "ncases"))
mdt <- setNames(counties[,c(2:4,which(colnames(counties) == xdt))],
c("polyname", "ncases"))
mdt <- setNames(counties[,c(2:4,which(colnames(counties) == xdt))],
c("polyname", "x", "y", "ncases"))
nc.px <- abind::abind(sapply(counties$polyname, function(pnm) {
cd <- mdt[mdt$polyname == pnm,]
cbind(rep(cd$x, cd$ncases), rep(cd$y, cd$ncases))
}), along = 1)
nc.px <- abind::abind(sapply(mdt$polyname, function(pnm) {
cd <- mdt[mdt$polyname == pnm,]
cbind(rep(cd$x, cd$ncases), rep(cd$y, cd$ncases))
}), along = 1)
mdt$polyname
nc.px <- abind::abind(sapply(mdt$polyname, function(pnm) {
cd <- mdt[mdt$polyname == pnm,]
cbind(rep(cd$x, cd$ncases), rep(cd$y, cd$ncases))
}), along = 1)
map("usa", mar = c(2,0.5,0.5,0.5))
reset.par()
map("usa", mar = c(2,0.5,0.5,0.5))
reset.par()
map("usa", mar = c(2,0.5,0.5,0.5))
invisible(sapply(mdt$polyname, function(pnm) {
cd <- mdt[mdt$polyname == pnm,]
points(x = jitter(rep(cd$x, cd$ncases)), y = jitter(rep(cd$y, cd$ncases)),
col = transp(rep(rbow(length(nc.int)-1)[findInterval(cd$ncases, nc.int)],
cd$ncases), 0.3), pch = 20, cex = 0.6)
}))
if(cd$ncases > 0) {
points(x = jitter(rep(cd$x, cd$ncases)),
y = jitter(rep(cd$y, cd$ncases)),
col = transp(rep(nc.cols[findInterval(cd$ncases, nc.int)],
cd$ncases), 0.3), pch = 20, cex = 0.6)
}
invisible(sapply(mdt$polyname, function(pnm) {
cd <- mdt[mdt$polyname == pnm,]
if(cd$ncases > 0) {
points(x = jitter(rep(cd$x, cd$ncases)),
y = jitter(rep(cd$y, cd$ncases)),
col = transp(rep(nc.cols[findInterval(cd$ncases, nc.int)],
cd$ncases), 0.3), pch = 20, cex = 0.6)
}
}))
nc.int <- c(0, 100, 250, 500, 1000, max(counties[,-(1:5)], na.rm = T)+1)
nc.cols <- rbow(length(nc.int)-1)
nc.int <- c(0, 100, 250, 500, 1000, max(counties[,-(1:7)], na.rm = T)+1)
nc.cols <- rbow(length(nc.int)-1)
mdt <- setNames(counties[,c(2:4,which(colnames(counties) == xdt))],
c("polyname", "x", "y", "ncases"))
reset.par()
map("usa", mar = c(2,0.5,0.5,0.5))
invisible(sapply(mdt$polyname, function(pnm) {
cd <- mdt[mdt$polyname == pnm,]
if(cd$ncases > 0) {
points(x = jitter(rep(cd$x, cd$ncases)),
y = jitter(rep(cd$y, cd$ncases)),
col = transp(rep(nc.cols[findInterval(cd$ncases, nc.int)],
cd$ncases), 0.3), pch = 20, cex = 0.6)
}
}))
title(main = "New cases on ")
title(main = "New cases on ", cex.main = 0.8)
xdt
gsub("X","",xdt)
as.Date(gsub("X","",xdt), format = "%d.%m.%y")
?as.Date
as.Date(gsub("X","",xdt), format = "%m.%d.%y")
title(main = as.Date(gsub("X","",xdt), format = "%m.%d.%y"), cex.main = 0.8)
map("usa", mar = c(2,0.5,0.5,0.5))
title(main = as.Date(gsub("X","",xdt), format = "%m.%d.%y"), cex.main = 0.8)
map("usa", mar = c(1,0.5,0.5,0.5))
title(main = as.Date(gsub("X","",xdt), format = "%m.%d.%y"), cex.main = 0.8)
title(main = as.Date(gsub("X","",xdt), format = "%m.%d.%y"), cex.main = 0.8, line = 1.5)
title(main = as.Date(gsub("X","",xdt), format = "%m.%d.%y"), cex.main = 0.8, line = 1)
title(main = as.Date(gsub("X","",xdt), format = "%m.%d.%y"), cex.main = 0.8, line = 0)
title(main = as.Date(gsub("X","",xdt), format = "%m.%d.%y"), cex.main = 0.8, line = 0.5)
map("usa", mar = c(1,0.5,0.5,0.5))
title(main = as.Date(gsub("X","",xdt), format = "%m.%d.%y"), cex.main = 0.8, line = 0.5)
invisible(sapply(mdt$polyname, function(pnm) {
cd <- mdt[mdt$polyname == pnm,]
if(cd$ncases > 0) {
points(x = jitter(rep(cd$x, cd$ncases)),
y = jitter(rep(cd$y, cd$ncases)),
col = transp(rep(nc.cols[findInterval(cd$ncases, nc.int)],
cd$ncases), 0.3), pch = 20, cex = 0.6)
}
}))
?gif
library(animate)
ddt <- as.Date(gsub("X","",xdt), format = "%m.%d.%y")
jpeg(paste0("us-cases-",ddt,".jpg"), width = 480 * 3, height = 480 * 2)
invisible(sapply(colnames(counties)[-(1:7)], function(xdt) {
mdt <- setNames(counties[,c(2:4,which(colnames(counties) == xdt))],
c("polyname", "x", "y", "ncases"))
ddt <- as.Date(gsub("X","",xdt), format = "%m.%d.%y")
jpeg(paste0("us-cases-",ddt,".jpg"), width = 480 * 3, height = 480 * 2); {
reset.par()
map("usa", mar = c(1,0.5,0.5,0.5))
title(main = ddt, cex.main = 0.8, line = 0.5)
invisible(sapply(mdt$polyname, function(pnm) {
cd <- mdt[mdt$polyname == pnm,]
if(cd$ncases > 0) {
points(x = jitter(rep(cd$x, cd$ncases)),
y = jitter(rep(cd$y, cd$ncases)),
col = transp(rep(nc.cols[findInterval(cd$ncases, nc.int)],
cd$ncases), 0.3), pch = 20, cex = 0.6)
}
}))
}; dev.off()
}))
which(colnames(counties) == "X3.1.20")
invisible(sapply(colnames(counties)[-(1:46)], function(xdt) {
mdt <- setNames(counties[,c(2:4,which(colnames(counties) == xdt))],
c("polyname", "x", "y", "ncases"))
ddt <- as.Date(gsub("X","",xdt), format = "%m.%d.%y")
jpeg(paste0("~/PhD/Misc-notes/Covid-19/animate/us-cases-",ddt,".jpg"),
width = 480 * 3, height = 480 * 2); {
reset.par()
map("usa", mar = c(1,0.5,0.5,0.5))
map("state", add = T)
title(main = ddt, cex.main = 1, line = 0.5)
invisible(sapply(mdt$polyname, function(pnm) {
cd <- mdt[mdt$polyname == pnm,]
if(cd$ncases > 0) {
points(x = rep(cd$x, cd$ncases),
y = rep(cd$y, cd$ncases),
col = transp(rep(nc.cols[findInterval(cd$ncases, nc.int)],
cd$ncases), 0.4), pch = 20, cex = 0.8)
}
}))
}; dev.off()
}))
nc.int
nc.cols <- c("steelblue", "darkorchid2", "magenta3", "red2", "orange")
ecdc.daily()
x <- seq(-5,5,0.01)
plot(x, dnorm(x, 0, 1))
dev.off()
dev.off()
plot(x, dnorm(x, 0, 1))
plot(x, dnorm(x, 0, 1), type = "l")
plot(x, dnorm(x, 0, sqrt(1 / 2)), type = "l")
?dt
lines(x, dt(x, 4), col = "red")
lines(x, dt(x, 2), col = "red")
plot(x, dnorm(x, 0, sqrt(1 / 2)), type = "l")
lines(x, dt(x, 2), col = "red")
library(mme.Bayes)
mu <- rep(1,3); P <- toeplitz(c(1,0.8, 0.6))
mu <- 1; sig <- sqrt(2)
sig^2
mu <- 1; sig <- sqrt(2); n <- 20
X <- rnorm(n, mu, sig)
xbar <- mean(X); SSx <- sum((X - Xbar)^2)
xbar <- mean(X); SSx <- sum((X - xbar)^2)
xbar <- mean(X); SSx <- sum((X - xbar)^2); s <- sd(X)
nu <- 5
Z <- rnorm(nu, mu, sig)
mean(Z)
sd(Z)
Z <- rnorm(nu, mu+0.1, sig*1.1)
nu <- 5; mu.0 <- mu+0.1; sig0 <- sig + 1; k0 <- 10
mu <- 1; sig <- sqrt(2); n <- 20
# set priors
nu0 <- 5; mu0 <- mu+0.1; sig0 <- sig + 1; k0 <- 10
X <- rnorm(n, mu, sig)
xbar <- mean(X); SSx <- sum((X - xbar)^2); s <- sd(X)
x <- seq(-5,5,0.01)
# plot priors
plot(x, dnorm(x, mu0, sig0 / sqrt(k0)), type = "l")
remove(x)
library(LaPlacesDemon)
install.packages("LaplacesDemon")
library(LaplacesDemon)
library(LaplacesDemon) # for scaled inverse-chi-square distribution
# prior for sigma
plot(seq(0,5,0.01), dinvchisq(seq(0,5,0.01), df = nu0, scale = sig^2))
# prior for sigma
plot(seq(0,5,0.01), dinvchisq(seq(0,5,0.01), df = nu0, scale = sig^2))
dinvchisq(0, df = nu0, scale = sig^2)
dinvchisq(0.0000001, df = nu0, scale = sig^2)
# prior for sigma
plot(seq(0,5,0.01), dinvchisq(seq(.01,5,0.01), df = nu0, scale = sig^2))
# prior for sigma
plot(seq(0.01,5,0.01), dinvchisq(seq(.01,5,0.01), df = nu0, scale = sig^2))
# prior for sigma
plot(seq(0.01,5,0.01), dinvchisq(seq(.01,5,0.01), df = nu0, scale = sig^2), type = "l")
# set priors
nu0 <- 5; mu0 <- mu+0.1; sig0 <- sig + 1; k0 <- 10; SSo <- sig0 * nu0
# set priors
nu0 <- 5; mu0 <- mu+0.1; sig0 <- sig + 1; k0 <- 10; SSo <- sig0^2 * nu0
# prior for sigma
plot(seq(0.01,5,0.01), dinvchisq(seq(.01,5,0.01), df = nu0, scale = SSo), type = "l")
?dinvchisq
# prior for sigma
plot(seq(0.01,5,0.01), dinvchisq(seq(.01,5,0.01), df = nu0, scale = SSo / nu), type = "l")
# prior for sigma
plot(seq(0.01,5,0.01), dinvchisq(seq(.01,5,0.01), df = nu0, scale = SSo / nu0), type = "l")
# Prior expectations and variances
E0.mu <- mu0
V0.mu <- sig0^2 / ko
V0.mu <- sig0^2 / k0
# set priors
nu0 <- 5; mu0 <- mu+0.1; sig0 <- sig + 0.1; k0 <- 10; SSo <- nu0 * sig0^2
mu <- 1; sig <- sqrt(2); n <- 20
# set priors
nu0 <- 5; mu0 <- mu+0.1; sig0 <- sig + 0.1; k0 <- 10; SSo <- nu0 * sig0^2
Y <- rnorm(n, mu, sig)
xbar <- mean(X); SSx <- sum((X - xbar)^2); s <- sd(X)
X <- rnorm(n, mu, sig)
remove(Y)
# set priors
nu0 <- 5; mu0 <- mu+0.1; sig0 <- sig + 0.1; k0 <- 10; SSo <- nu0 * sig0^2
X <- rnorm(n, mu, sig)
xbar <- mean(X); SSx <- sum((X - xbar)^2); s <- sd(X)
# Prior expectations and variances
E0.mu <- mu0
V0.mu <- sig0^2 / k0
lines(seq(-5,5,0.01), dnorm(seq(-5,5,0.01), E0.mu, sqrt(V0.mu)), col = "red2")
E0.sig <- SSo /
# prior for mu|sig (identical)
plot(seq(-5,5,0.01), dnorm(seq(-5,5,0.01), mu0, sig0 / sqrt(k0)), type = "l")
lines(seq(-5,5,0.01), dnorm(seq(-5,5,0.01), E0.mu, sqrt(V0.mu)), col = "red2")
mu0
E0.mu
sig0 / sqrt(k0)
sqrt(V0.mu)
# priors for sigma
plot(seq(0.01,5,0.01), dinvchisq(seq(.01,5,0.01), df = nu0, scale = SSo), type = "l")
# priors for sigma
plot(seq(0.01,10,0.01), dinvchisq(seq(.01,10,0.01), df = nu0, scale = SSo), type = "l")
# priors for sigma
plot(seq(0.01,20,0.01), dinvchisq(seq(.01,20,0.01), df = nu0, scale = SSo), type = "l")
# priors for sigma
plot(seq(0.01,30,0.01), dinvchisq(seq(.01,30,0.01), df = nu0, scale = SSo), type = "l")
E0.sig <- SSo / (nu0-m-1)
E0.sig <- SSo / (nu0-2)
# set priors
nu0 <- 5; mu0 <- mu+0.1; sig0 <- sig + 0.1; k0 <- 10; SSo <- nu0 * sig0^2; c <- 2/(nu0 - 4)
V0.sig <- c * E0.sig^2
lines(seq(0.01,5,0.01), dnorm(seq(0.01,5,0.01), E0.sig, sqrt(V0.sig)), col = "red2")
plot(seq(0.01,5,0.01), dnorm(seq(0.01,5,0.01), E0.sig, sqrt(V0.sig)), col = "red2")
# priors for sigma
plot(seq(0.01,30,0.01), dinvchisq(seq(.01,30,0.01), df = nu0, scale = SSo), type = "l", ylim = c(0,0.1))
lines(seq(0.01,30,0.01), dnorm(seq(0.01,30,0.01), E0.sig, sqrt(V0.sig)), col = "red2")
E0.sig
sig0
list.repos()
list.repos()
list.repos()
qq <- rinvchisq(1000, df = nu0, scale = SSo)
plot(qq)
plot(density(qq))
plot(density(qq), xlim = c(0,100))
lines(dinvchisq(seq(.01,100,0.01), df = nu0, scale = SSo))
plot(density(qq, prob = T), xlim = c(0,100))
plot(density(qq), xlim = c(0,100))
lines(seq(.01,100,0.01)dinvchisq(seq(.01,100,0.01), df = nu0, scale = SSo), col = "blue")
lines(seq(.01,100,0.01), dinvchisq(seq(.01,100,0.01), df = nu0, scale = SSo), col = "blue")
plot(density(qq), xlim = c(0,100), ylim = c(0,0.1))
lines(seq(.01,100,0.01), dinvchisq(seq(.01,100,0.01), df = nu0, scale = SSo), col = "blue")
lines(seq(.01,100,0.01), dnorm(seq(.01,100,0.01), mean(qq), sd(qq)), col = "red2")
sd(qq)
mean(qq)
qq <- rinvchisq(1000, df = nu0, scale = SSo/nu0)
plot(density(qq), xlim = c(0,100), ylim = c(0,0.1))
lines(seq(.01,100,0.01), dinvchisq(seq(.01,100,0.01), df = nu0, scale = SSo), col = "blue")
qq <- rinvchisq(1000, df = nu0, scale = SSo/nu0)
plot(density(qq), xlim = c(0,100), ylim = c(0,0.1))
lines(seq(.01,100,0.01), dinvchisq(seq(.01,100,0.01), df = nu0, scale = SSo/nu0), col = "blue")
plot(density(qq), xlim = c(0,100), ylim = c(0,1))
lines(seq(.01,100,0.01), dinvchisq(seq(.01,100,0.01), df = nu0, scale = SSo/nu0), col = "blue")
plot(density(qq), xlim = c(0,100), ylim = c(0,0.4))
lines(seq(.01,100,0.01), dinvchisq(seq(.01,100,0.01), df = nu0, scale = SSo/nu0), col = "blue")
lines(seq(.01,100,0.01), dnorm(seq(.01,100,0.01), mean(qq), sd(qq)), col = "red2")
# priors for sigma
plot(seq(0.01,30,0.01), dinvchisq(seq(.01,30,0.01), df = nu0, scale = sig0^2), type = "l", ylim = c(0,0.1))
lines(seq(0.01,30,0.01), dnorm(seq(0.01,30,0.01), E0.sig, sqrt(V0.sig)), col = "red2")
# priors for sigma
plot(seq(0.01,30,0.01), dinvchisq(seq(.01,30,0.01), df = nu0, scale = sig0^2), type = "l",
ylim = c(0,0.2))
lines(seq(0.01,30,0.01), dnorm(seq(0.01,30,0.01), E0.sig, sqrt(V0.sig)), col = "red2")
# priors for sigma
plot(seq(0.01,30,0.01), dinvchisq(seq(.01,30,0.01), df = nu0, scale = sig0^2), type = "l",
ylim = c(0,0.4))
lines(seq(0.01,30,0.01), dnorm(seq(0.01,30,0.01), E0.sig, sqrt(V0.sig)), col = "red2")
